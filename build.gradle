/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

plugins {
    id 'java'
    id 'ru.vyarus.use-python' version '1.2.0'
    id "com.github.hierynomus.jython" version "0.11.0"
    id "com.xebialabs.xldp" version "1.0.5"
    id "de.gliderpilot.semantic-release" version "1.4.0"
}

repositories {
    maven {
        url "https://dist.xebialabs.com/public/maven2/"
    }
}

// publishing {
//     publications {
//         mavenJava(MavenPublication) {
//             artifact source: xlPlugin, extension: 'xldp'
//         }
//     }
//     repositories {
//         maven {
//             def releasesRepoUrl = "https://nexus.example.com:8443/nexus/content/repositories/java-releases/"
//             def snapshotsRepoUrl = "https://nexus.example.com:8443/nexus/content/repositories/java-snapshots/"
//             url = version.toString().endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

//             credentials {
//                 username = System.properties['gradle.user']
//                 password = System.properties['gradle.password']
//             }
//         }
//     }
// }

python {
    pythonBinary = 'python'
    pip 'onetimepass:1.0.1'
    pip 'certifi:2019.9.11'
    pip 'chardet:3.0.4'
    pip 'idna:2.8'
    pip 'requests:2.22.0'
    pip 'requests_toolbelt:0.9.1'
    pip 'urllib3:1.25.7'
    // unittesting packages
    pip 'mock:2.0.0'
    pip 'pytest:3.5.1'
    pip 'requests:2.22.0'
}

dependencies {
    runtimeOnly 'org.python:jython-standalone:2.7.1.patch2618'

    jython ":onetimepass:1.0.1"
    jython ":certifi:2019.9.11"
    jython ":chardet:3.0.4"
    jython ":idna:2.8"
    jython ":requests:2.22.0"
    jython ":requests_toolbelt:0.9.1"
    jython python(":urllib3:1.25.7") {
      copy {
        from "src/urllib3" // Will copy the contents of the directory into the module directory
      }
    }

    // pytest and its dependencies
    testJython python(":pytest:3.10.1") {
        useModuleName = false
        copy {
            from "src" // Will copy the contents of the directory into the module directory
        }
    }
    testJython ":atomicwrites:1.2.1"
    testJython python(":attrs:18.2.0:attr") {
        copy {
            from "src/attr"
        }
    }
    testJython ":funcsigs:1.0.2"
    testJython ":more-itertools:4.3.0:more_itertools"
    testJython python(':pathlib2:2.3.0') {
        useModuleName = false
        copy {
            from "pathlib2.py"
        }
    }
    testJython python(':scandir:1.9.0') {
        useModuleName = false
        copy {
            from "scandir.py"
        }
    }
    testJython ":pluggy:0.8.0"
    testJython ":py:1.7.0"
    testJython ":setuptools:40.6.2"
    testJython python (":setuptools:40.6.2:pkg_resources") {
        copy {
            from "pkg_resources"
        }
    }
    testJython python(":six:1.11.0") {
        useModuleName = false
        copy {
            from "six.py" // Will only copy six.py
        }
    }

    // mock and its dependencies
    testJython ':mock:2.0.0'
    testJython ":backports.unittest_mock:1.4:backports"
    testJython ":pbr:5.1.1"
}

sourceSets.main.resources.srcDirs += ['src/main/jython']
sourceSets.test.resources.srcDirs += ['src/test/jython']

task pytest(type: PythonTask) {
    doFirst {
        new File(projectDir, "/src/main/resources/conftest.py").text=""
    }
    module = 'pytest'
    command = '-W ignore::DeprecationWarning'
}

task unittest(type: JavaExec) {
    classpath = configurations.runtimeClasspath
    classpath += sourceSets.main.runtimeClasspath
    classpath += sourceSets.test.runtimeClasspath
    main 'org.python.util.jython'
    args '-m', 'pytest'
}

task changeLog {
    doLast {
        def commits = semanticRelease.changeLog.commits(
            com.github.zafarkhaja.semver.Version.valueOf(
            project.version.inferredVersion.previousVersion))
        println "Scope: " + semanticRelease.changeLog.changeScope(commits)
        println "ChangeLog:" + semanticRelease.changeLog.changeLog(commits, project.version.inferredVersion)
    }
}

task deleteJythonOutput(type: Delete) {
    delete fileTree('src') {
        include '**/*.pyc'
        include '**/*.class'
        include '**/conftest.py'
    }
}

task deleteCache {
    def directories_to_remove = []
        fileTree (dir: 'src').visit { def fileVisitDetails ->
            def file = fileVisitDetails.file
                if (file.isDirectory() && (file.name == '__pycache__')) {
                    directories_to_remove << file
                }
        }
    directories_to_remove.each { dir -> dir.delete() }
}

task pluginVersion(type: WriteProperties) {
    outputFile = file('src/main/resources/plugin-version.properties')
    comment 'Copyright ABC'
    property 'plugin', project.name
    property 'version', project.version
}

// Optional: when not using master as mainline the correct branch needs to be included in release branches 
semanticRelease {
    releaseBranches {
      include 'main'
    }
}

processResources.dependsOn pluginVersion
deleteCache.dependsOn deleteJythonOutput
clean.dependsOn deleteCache
changeLog.dependsOn build
project.tasks.release.dependsOn changeLog
test.dependsOn unittest
